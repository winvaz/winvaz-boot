package com.icore.winvaz.javase.basic;

import org.junit.jupiter.api.Test;

/**
 * @Deciption 进制
 * @Author wdq
 * @Create 2019-10-14 20:23
 */
public class ScaleTest {

    @Test
    public void test() {
        /**
         * @Description
         *  对于整数的四种进制表现形式：
         *      二进制：0b/0B(1.7的新特性) 只有0和1
         *      八进制：0-7 ，满8进1. 用0开头表示。
         *      十进制：正常显示，0-9 ，满10进1.
         *      十六进制：0x/0X 0-9 A-F(11-15)，0-9，A-F，满16进1. 用0x开头表示。
         */
        // 14
        System.out.println(0b1110); // 二进制
        System.out.println(14); // 十进制
        System.out.println(016); // 八进制
        System.out.println(0xE); // 十六进制

        System.out.println("===================");

        // 用int类型的包装类(Integer)来转换
        System.out.println(Integer.toBinaryString(14)); // 二进制 1110
        System.out.println(Integer.toOctalString(14)); // 八进制 16
        System.out.println(Integer.toHexString(14)); // 十六进制 e
        /**
         * @Description
         *  其他进制转成十进制
         *  十进制：131
         *  131 = 100 + 30 + 1 = 1*10^2 + 3*10^1 + 1*10^0
         *  符合规律：
         *      每位上的数字*进制^权(当位的位数减1) 相加
         *  二进制131：10000011
         *      10000011 = 1*2^7 + 0*2^6... + 1*2^1 + 1*2^0
         *                         = 128 + 0... + 2 + 1
         *                         = 131
         *
         *   八进制：203
         *      203 = 2*8^2 + 0*8^1 + 3*8^0
         *              = 128 + 0 + 3
         *              = 131
         *
         *   十六进制：83
         *      83 = 8*16^1 + 3*16^0
         *           = 128 + 3
         *           = 131
         *
         *  十六进制：AF1
         *      AF1 = 10*16^2 + 15*16^1 + 1*16^0
         *             = 2560 + 240 + 1
         *             = 2801
         *
         */

        /**
         * @Description
         *  十进制转换成其他进制
         *      十进制：41
         *          41 / 10 = 4.....1
         *          4 / 10 = 0.....4
         *
         *    符合规律：
         *      依次除以进制，直到商为0为止。
         *      倒取余
         *
         *      转换成二进制：41 --->101001
         *          41 / 2 = 20.....1
         *         20 / 2 = 10......0
         *         10 / 2 = 5........0
         *         5 / 2 = 2..........1
         *         2 / 2 = 1.........0
         *         1 / 2 = 0.........1
         *
         *      转换成十六进制：41 --->29(二九不是二十九)
         *          41 / 16 = 2......9
         *          2 / 16 = 0.......2
         */

        /**
         * @Description
         *  快速转换法：二进制转换成八进制，十进制，十六进制
         *   本质仍是正常的数学运算
         *
         *   二进制：47--> 101111
         *   001     1
         *   010     2
         *   100     4
         *   1000   8
         *
         *   快速转换成八进制：
         *    以三位为一个单位，通过十进制将数字算出，在拼接数字
         *    101    111
         *     5        7
         *    八进制数：57
         *
         *    二进制：1101111
         *    001  101   111
         *      1        5      7
         *   八进制：157
         *
         *   快速转换成十六进制
         *   以四个为一个单位，通过十进制将数字算出，再拼接数字
         *   二进制47：101111
         *   0010 1111
         *      2     15=F
         *   十六进制：2F
         */
        /**
         * 对于正数：原码 反码 补码 都其本身
         * 对于负数：原码其本身，反码：符号位不变，其它位数取反，补码：反码+1
         * 模拟-71+60的计算机计算过程
         * 1.先将数字转换成原码
         * 2.再分别转换成补码
         * 3.再进行计算
         * 4.再转换成原码
         * 5.再转换成十进制
         *  最高位为符号位，1为负，0为正
         * -71的原码：1100 0111
         *  60的原码：0011 1100
         *
         *  -71的补码：1011 1001
         *   60的补码：0011 1100
         *   +            --------------
         *   补码               1111 0101
         *   反码-1       ---------------
         *                       1111 0100
         *   原码          -------------
         *                      1000 1011
         *   转成十进制   -11
         */
         }
}
